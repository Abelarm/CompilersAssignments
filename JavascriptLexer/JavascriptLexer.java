/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>JavaScript.jflex</tt>
 */
class JavascriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING1 = 2;
  public static final int STRING2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\1\0\1\1\1\3\22\0\1\1\1\32\1\54"+
    "\1\0\1\60\1\35\1\33\1\76\2\26\1\6\1\13\1\26\1\14"+
    "\1\7\1\5\1\10\1\17\6\22\2\11\2\26\1\27\1\30\1\31"+
    "\1\26\1\0\1\52\1\16\2\25\1\12\1\25\3\37\1\53\1\37"+
    "\1\37\2\37\1\21\3\37\2\37\1\51\2\37\1\24\2\37\1\43"+
    "\1\41\1\42\1\35\1\37\1\57\1\65\1\15\1\63\1\67\1\62"+
    "\1\55\1\44\1\74\1\46\1\37\1\66\1\73\1\45\1\70\1\20"+
    "\1\72\1\37\1\64\1\47\1\56\1\50\1\40\1\75\1\23\1\71"+
    "\1\37\1\61\1\34\1\36\1\26\41\0\1\1\u15df\0\1\1\u097f\0"+
    "\13\1\35\0\2\2\5\0\1\1\57\0\1\1\u0fa0\0\1\1\ucefe\0"+
    "\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u0110\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\2\3\2\4\1\5\2\3\1\5"+
    "\7\3\1\6\1\1\2\5\1\7\2\5\1\0\7\5"+
    "\1\10\1\11\1\12\1\13\1\11\1\12\1\0\1\14"+
    "\1\0\1\2\3\0\1\4\4\0\1\5\1\3\3\5"+
    "\1\15\1\16\10\5\1\0\1\17\1\0\6\5\1\20"+
    "\5\5\1\21\1\22\1\23\1\24\1\25\1\26\4\0"+
    "\1\27\1\30\1\31\2\5\1\32\4\5\1\33\2\5"+
    "\1\34\3\5\2\0\13\5\1\35\3\5\12\26\1\0"+
    "\1\14\1\5\1\36\7\5\1\37\1\5\1\0\1\17"+
    "\2\0\2\5\1\40\2\5\1\41\7\5\1\42\1\5"+
    "\1\43\2\5\1\44\4\5\1\45\2\5\1\46\1\5"+
    "\1\47\1\50\4\5\1\51\1\52\1\53\1\5\1\54"+
    "\2\5\1\55\1\5\1\56\1\5\1\57\2\5\1\60"+
    "\1\5\1\61\1\5\1\62\2\5\1\63\1\5\1\64"+
    "\1\65\1\66\1\5\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\275\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\275\0\u04ec\0\u052b"+
    "\0\u056a\0\275\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\275\0\u081f\0\u085e\0\275"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u091b\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0276\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\275\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u0276\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\275\0\275\0\275\0\275"+
    "\0\275\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u13b0\0\u13ef\0\u0276\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u0276\0\u152a\0\u1569\0\u0276\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u0276\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\275\0\u1c8c\0\275\0\u1ccb\0\u0276\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u0276\0\u1ec3\0\u1f02"+
    "\0\u0627\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u0276\0\u203d\0\u207c"+
    "\0\u0276\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u0276\0\u2274\0\u0276\0\u22b3\0\u22f2\0\u0276\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u0276\0\u242d\0\u246c\0\u0276\0\u24ab\0\u0276"+
    "\0\u0276\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u0276\0\u0276\0\u0276"+
    "\0\u25e6\0\u0276\0\u2625\0\u2664\0\u0276\0\u26a3\0\u0276\0\u26e2"+
    "\0\u0276\0\u2721\0\u2760\0\u0276\0\u279f\0\u0276\0\u27de\0\u0276"+
    "\0\u281d\0\u285c\0\u0276\0\u289b\0\u0276\0\u0276\0\u0276\0\u28da"+
    "\0\u0276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\12\2\13"+
    "\1\12\3\13\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\7\1\26\1\13\1\27\1\0\2\17\2\13"+
    "\1\30\1\31\4\13\1\32\1\33\1\34\1\35\1\13"+
    "\1\17\1\36\1\37\1\40\2\13\1\41\1\42\1\43"+
    "\3\13\1\44\1\45\3\46\2\0\34\46\1\47\34\46"+
    "\1\50\3\51\2\0\34\51\1\52\12\51\1\50\22\51"+
    "\103\0\1\4\72\0\2\53\3\0\1\54\1\55\21\53"+
    "\1\56\10\53\1\57\1\0\1\60\33\53\30\0\1\17"+
    "\55\0\1\61\2\62\5\0\1\62\2\0\1\62\63\0"+
    "\1\62\2\0\1\63\2\0\2\64\1\0\2\65\1\0"+
    "\2\66\35\0\1\63\23\0\1\62\2\12\1\63\4\0"+
    "\1\12\2\0\1\12\37\0\1\63\24\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\14\13\14\0\1\17\14\0\1\17\62\0"+
    "\1\17\13\0\1\17\56\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\67\11\13\30\0\1\7\1\17\76\0\1\7"+
    "\1\17\75\0\1\17\1\70\75\0\1\7\76\0\1\17"+
    "\2\0\1\17\73\0\1\17\3\0\1\17\52\0\3\13"+
    "\2\0\3\13\1\71\5\13\11\0\2\13\3\0\10\13"+
    "\1\0\2\13\1\0\1\13\1\0\3\13\1\72\10\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\1\13"+
    "\1\73\6\13\1\0\1\74\1\13\1\0\1\13\1\0"+
    "\6\13\1\75\5\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\4\13\1\76\3\13\1\0\2\13\1\0"+
    "\1\13\1\0\13\13\1\77\11\0\3\13\2\0\3\13"+
    "\1\100\5\13\11\0\2\13\3\0\2\13\1\101\1\13"+
    "\1\102\3\13\1\0\2\13\1\0\1\13\1\0\14\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\10\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\1\103\4\13"+
    "\1\104\2\13\1\105\1\13\1\0\41\35\1\106\15\35"+
    "\1\107\1\110\16\35\10\0\3\13\2\0\6\13\1\111"+
    "\2\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\11\13\1\112\2\13\11\0\3\13\2\0"+
    "\3\13\1\113\5\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\3\13\1\114\5\13\1\115"+
    "\2\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\1\116\13\13"+
    "\11\0\3\13\2\0\3\13\1\117\5\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\1\120"+
    "\13\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\1\121\13\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\2\13"+
    "\1\122\5\13\1\0\2\13\1\0\1\13\1\0\14\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\2\13"+
    "\1\123\5\13\1\0\2\13\1\0\1\13\1\0\12\13"+
    "\1\124\1\13\1\0\3\46\2\0\34\46\1\0\34\46"+
    "\57\0\1\125\5\0\1\126\3\0\1\127\5\0\1\130"+
    "\3\51\2\0\34\51\1\0\12\51\1\0\22\51\54\0"+
    "\1\131\1\0\1\125\5\0\1\126\3\0\1\127\6\0"+
    "\2\53\3\0\1\132\33\53\1\57\1\0\1\60\33\53"+
    "\2\54\3\0\72\54\6\133\1\134\70\133\2\53\3\0"+
    "\72\53\2\60\3\0\34\60\1\135\1\53\1\0\33\60"+
    "\7\0\1\17\77\0\2\62\1\63\4\0\1\62\2\0"+
    "\1\62\37\0\1\63\24\0\2\62\1\0\2\136\2\0"+
    "\1\62\2\0\1\62\64\0\1\137\6\0\1\137\67\0"+
    "\1\140\6\0\1\140\2\0\1\140\64\0\3\141\2\0"+
    "\3\141\2\0\1\141\2\0\1\141\24\0\1\141\2\0"+
    "\1\141\4\0\2\141\1\0\1\141\1\0\1\141\17\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\142\13\13\31\0\1\17"+
    "\1\7\55\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\2\13\1\143\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\2\13\1\144"+
    "\11\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\10\13\1\145"+
    "\3\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\3\13\1\146\4\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\10\13\1\147"+
    "\3\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\2\13\1\150\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\2\13\1\151"+
    "\11\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\6\13\1\152"+
    "\5\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\6\13\1\153"+
    "\5\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\7\13\1\154"+
    "\4\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\10\13\1\155"+
    "\3\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\2\13\1\156\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\157\11\13\1\0\2\35\3\0\3\35\1\160"+
    "\12\35\1\161\134\35\1\107\15\35\10\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\1\13\1\162"+
    "\1\0\1\13\1\0\10\13\1\163\3\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\3\13\1\164\4\13"+
    "\1\0\2\13\1\0\1\13\1\0\14\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\2\13"+
    "\1\0\1\13\1\0\6\13\1\165\5\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\3\13\1\166\4\13"+
    "\1\0\1\13\1\167\1\0\1\13\1\0\14\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\3\13\1\170\10\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\1\13\1\171\1\0\1\13\1\0\14\13\11\0\3\13"+
    "\2\0\1\172\10\13\11\0\2\13\3\0\10\13\1\0"+
    "\1\173\1\13\1\0\1\13\1\0\11\13\1\174\2\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\10\13"+
    "\1\0\2\13\1\0\1\13\1\0\13\13\1\175\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\176\13\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\1\13"+
    "\1\177\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\2\13\1\200\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\24\0\1\201\1\202"+
    "\17\0\1\203\1\204\1\205\1\206\1\207\1\210\1\211"+
    "\1\212\23\0\6\133\1\213\70\133\5\0\1\214\1\134"+
    "\70\0\2\60\3\0\72\60\10\0\2\62\5\0\1\62"+
    "\2\0\1\62\64\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\3\13"+
    "\1\215\10\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\5\13"+
    "\1\216\6\13\11\0\3\13\2\0\3\13\1\217\5\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\14\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\1\13\1\220\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\1\221\13\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\10\13"+
    "\1\0\1\13\1\222\1\0\1\13\1\0\14\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\3\13\1\223\10\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\13\1\224\12\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\225\13\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\3\13\1\226\4\13"+
    "\1\0\2\13\1\0\1\13\1\0\14\13\11\0\3\13"+
    "\2\0\3\13\1\227\5\13\11\0\2\13\3\0\10\13"+
    "\1\0\2\13\1\0\1\13\1\0\14\13\1\0\41\35"+
    "\1\230\15\35\1\231\1\232\16\35\10\0\3\233\2\0"+
    "\3\233\2\0\1\233\2\0\1\233\24\0\1\233\2\0"+
    "\1\233\4\0\2\233\1\0\1\233\1\0\1\233\17\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\234\13\13\11\0\3\13"+
    "\2\0\3\13\1\235\5\13\11\0\2\13\3\0\10\13"+
    "\1\0\2\13\1\0\1\13\1\0\14\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\2\13"+
    "\1\0\1\13\1\0\1\236\13\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\3\13\1\237\4\13\1\0"+
    "\1\13\1\240\1\0\1\13\1\0\14\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\2\13"+
    "\1\0\1\13\1\0\1\241\13\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\1\13\1\242\12\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\3\13\1\243\4\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\4\13\1\244\3\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\4\13\1\245\3\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\3\13\1\246\10\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\1\247\13\13\11\0\3\13\2\0\11\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\11\13\1\250\2\13\11\0\3\13\2\0\11\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\12\13\1\251\1\13\11\0\3\13\2\0\11\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\11\13\1\252\2\13\25\0\1\202\22\0\1\206"+
    "\1\207\1\210\1\211\1\212\72\0\1\206\1\207\1\210"+
    "\1\211\1\212\46\0\1\201\1\202\20\0\1\204\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\46\0\1\201\1\202"+
    "\21\0\1\205\1\206\1\207\1\210\1\211\1\212\46\0"+
    "\1\201\1\202\22\0\1\206\1\207\1\210\1\211\1\212"+
    "\73\0\1\207\1\210\1\211\1\212\74\0\1\210\1\211"+
    "\1\212\75\0\1\211\1\212\76\0\1\212\23\0\5\133"+
    "\1\214\1\213\70\133\10\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\4\13\1\253\7\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\254\11\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\3\13\1\255\10\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\256\11\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\1\13\1\257\12\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\11\13\1\260\2\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\1\13\1\261\1\0\1\13"+
    "\1\0\14\13\11\0\3\13\2\0\3\13\1\262\5\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\14\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\13\13"+
    "\1\263\1\0\10\35\1\160\30\35\1\230\15\35\1\231"+
    "\1\232\57\35\1\230\15\35\1\231\1\232\1\231\15\35"+
    "\10\0\3\35\2\0\3\35\2\0\1\35\2\0\1\35"+
    "\24\0\1\35\2\0\1\35\4\0\2\35\1\0\1\35"+
    "\1\0\1\35\17\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\6\13"+
    "\1\264\5\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\265\11\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\1\13\1\266\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\2\13\1\267\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\12\13\1\270"+
    "\1\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\3\13\1\271\4\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\2\13\1\272"+
    "\11\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\1\273\7\13\1\0\2\13\1\0\1\13\1\0\14\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\4\13"+
    "\1\274\3\13\1\0\2\13\1\0\1\13\1\0\14\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\10\13"+
    "\1\0\1\13\1\275\1\0\1\13\1\0\14\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\5\13\1\276\6\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\277\13\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\1\13"+
    "\1\300\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\6\13\1\301\5\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\12\13\1\302\1\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\11\13\1\303\2\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\2\13\1\304\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\1\305\1\13"+
    "\1\0\1\13\1\0\14\13\11\0\3\13\2\0\11\13"+
    "\11\0\2\13\3\0\10\13\1\0\2\13\1\0\1\13"+
    "\1\0\5\13\1\306\6\13\11\0\3\13\2\0\11\13"+
    "\11\0\2\13\3\0\10\13\1\0\1\13\1\307\1\0"+
    "\1\13\1\0\14\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\6\13\1\310\5\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\6\13\1\311\5\13\11\0\3\13\2\0\11\13\11\0"+
    "\2\13\3\0\1\312\7\13\1\0\2\13\1\0\1\13"+
    "\1\0\14\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\11\13"+
    "\1\313\2\13\11\0\3\13\2\0\11\13\11\0\2\13"+
    "\3\0\10\13\1\0\2\13\1\0\1\13\1\0\1\314"+
    "\13\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\1\13\1\315"+
    "\12\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\7\13\1\316"+
    "\4\13\11\0\3\13\2\0\3\13\1\317\5\13\11\0"+
    "\2\13\3\0\10\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\3\13\1\320\4\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\4\13\1\321\3\13\1\0\2\13\1\0\1\13\1\0"+
    "\14\13\11\0\3\13\2\0\11\13\11\0\2\13\3\0"+
    "\10\13\1\0\2\13\1\0\1\13\1\0\1\322\13\13"+
    "\11\0\3\13\2\0\11\13\11\0\2\13\3\0\10\13"+
    "\1\0\1\13\1\323\1\0\1\13\1\0\14\13\11\0"+
    "\3\13\2\0\11\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\324\13\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\2\13"+
    "\1\0\1\13\1\0\6\13\1\325\5\13\11\0\3\13"+
    "\2\0\11\13\11\0\2\13\3\0\10\13\1\0\2\13"+
    "\1\0\1\13\1\0\1\326\13\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\327\11\13\11\0\3\13\2\0"+
    "\3\13\1\330\5\13\11\0\2\13\3\0\10\13\1\0"+
    "\2\13\1\0\1\13\1\0\14\13\11\0\3\13\2\0"+
    "\11\13\11\0\2\13\3\0\10\13\1\0\1\331\1\13"+
    "\1\0\1\13\1\0\14\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\6\1\1\11\3\1\1\11"+
    "\2\1\1\0\7\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\4\0\17\1\1\0"+
    "\1\11\1\0\14\1\5\11\1\1\4\0\21\1\2\0"+
    "\30\1\1\11\1\0\1\11\13\1\1\0\1\1\2\0"+
    "\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}

	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JavascriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] {  }");
            { 
            }
          case 56: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return symbol(sym.DIVPUNCTUATOR, yytext()); }");
            { return symbol(sym.DIVPUNCTUATOR, yytext());
            }
          case 57: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return symbol(sym.PUNCTUATOR, yytext()); }");
            { return symbol(sym.PUNCTUATOR, yytext());
            }
          case 58: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return symbol(sym.DECIMALLITERAL, yytext()); }");
            { return symbol(sym.DECIMALLITERAL, yytext());
            }
          case 59: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return symbol(sym.IDENTIFIERNAME, yytext()); }");
            { return symbol(sym.IDENTIFIERNAME, yytext());
            }
          case 60: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return symbol(sym.RBPUNCTUATOR); }");
            { return symbol(sym.RBPUNCTUATOR);
            }
          case 61: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { string.setLength(0); yybegin(STRING2); }");
            { string.setLength(0); yybegin(STRING2);
            }
          case 62: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { string.setLength(0); yybegin(STRING1); }");
            { string.setLength(0); yybegin(STRING1);
            }
          case 63: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          case 64: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          case 65: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { yybegin(YYINITIAL); "+ZZ_NL+"\t\t\t\t\t\t\t\t   return symbol(sym.STRING_LITERAL, "+ZZ_NL+"\t\t\t\t\t\t\t\t   string.toString()); }");
            { yybegin(YYINITIAL); 
								   return symbol(sym.STRING_LITERAL, 
								   string.toString());
            }
          case 66: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return symbol(sym.COMMENT); }");
            { return symbol(sym.COMMENT);
            }
          case 67: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            }
          case 68: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return symbol(sym.IN); }");
            { return symbol(sym.IN);
            }
          case 69: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return symbol(sym.TEMPLATE, yytext()); }");
            { return symbol(sym.TEMPLATE, yytext());
            }
          case 70: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return symbol(sym.DO); }");
            { return symbol(sym.DO);
            }
          case 71: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          case 72: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { string.append(\'\\r\'); }");
            { string.append('\r');
            }
          case 73: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          case 74: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { string.append(\'\\\'\'); }");
            { string.append('\'');
            }
          case 75: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          case 76: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return symbol(sym.REGEXLITERAL, yytext()); }");
            { return symbol(sym.REGEXLITERAL, yytext());
            }
          case 77: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return symbol(sym.BYNARYLITERAL, yytext()); }");
            { return symbol(sym.BYNARYLITERAL, yytext());
            }
          case 78: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return symbol(sym.OCTALLITERAL, yytext()); }");
            { return symbol(sym.OCTALLITERAL, yytext());
            }
          case 79: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return symbol(sym.HEXLITERAL, yytext()); }");
            { return symbol(sym.HEXLITERAL, yytext());
            }
          case 80: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return symbol(sym.VAR); }");
            { return symbol(sym.VAR);
            }
          case 81: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return symbol(sym.FOR); }");
            { return symbol(sym.FOR);
            }
          case 82: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return symbol(sym.TRY); }");
            { return symbol(sym.TRY);
            }
          case 83: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return symbol(sym.NEW); }");
            { return symbol(sym.NEW);
            }
          case 84: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return symbol(sym.VOID); }");
            { return symbol(sym.VOID);
            }
          case 85: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return symbol(sym.THIS); }");
            { return symbol(sym.THIS);
            }
          case 86: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          case 87: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return symbol(sym.CASE); }");
            { return symbol(sym.CASE);
            }
          case 88: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return symbol(sym.WITH); }");
            { return symbol(sym.WITH);
            }
          case 89: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return symbol(sym.BREAK); }");
            { return symbol(sym.BREAK);
            }
          case 90: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return symbol(sym.SUPER); }");
            { return symbol(sym.SUPER);
            }
          case 91: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return symbol(sym.THROW); }");
            { return symbol(sym.THROW);
            }
          case 92: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return symbol(sym.CONST); }");
            { return symbol(sym.CONST);
            }
          case 93: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return symbol(sym.CATCH); }");
            { return symbol(sym.CATCH);
            }
          case 94: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return symbol(sym.CLASS); }");
            { return symbol(sym.CLASS);
            }
          case 95: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return symbol(sym.YIELD); }");
            { return symbol(sym.YIELD);
            }
          case 96: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return symbol(sym.WHILE); }");
            { return symbol(sym.WHILE);
            }
          case 97: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return symbol(sym.IMPORT); }");
            { return symbol(sym.IMPORT);
            }
          case 98: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return symbol(sym.SWITCH); }");
            { return symbol(sym.SWITCH);
            }
          case 99: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return symbol(sym.TYPEOF); }");
            { return symbol(sym.TYPEOF);
            }
          case 100: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return symbol(sym.EXPORT); }");
            { return symbol(sym.EXPORT);
            }
          case 101: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          case 102: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return symbol(sym.DELETE); }");
            { return symbol(sym.DELETE);
            }
          case 103: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return symbol(sym.FINALLY); }");
            { return symbol(sym.FINALLY);
            }
          case 104: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return symbol(sym.EXTENDS); }");
            { return symbol(sym.EXTENDS);
            }
          case 105: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return symbol(sym.DEFAULT); }");
            { return symbol(sym.DEFAULT);
            }
          case 106: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return symbol(sym.FUNCTION); }");
            { return symbol(sym.FUNCTION);
            }
          case 107: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return symbol(sym.CONTINUE); }");
            { return symbol(sym.CONTINUE);
            }
          case 108: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return symbol(sym.DEBUGGER); }");
            { return symbol(sym.DEBUGGER);
            }
          case 109: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return symbol(sym.INSTANCEOF); }");
            { return symbol(sym.INSTANCEOF);
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java JavascriptLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        JavascriptLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new JavascriptLexer(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
