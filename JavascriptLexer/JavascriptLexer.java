/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
import java.util.HashMap;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>JavaScript.jflex</tt>
 */
class JavascriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING1 = 2;
  public static final int STRING2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\4\22\0\1\1\1\32\1\54"+
    "\1\0\1\60\1\35\1\33\1\76\2\26\1\6\1\13\1\26\1\14"+
    "\1\7\1\5\1\10\1\17\6\22\2\11\2\26\1\27\1\30\1\31"+
    "\1\26\1\0\1\52\1\16\2\25\1\12\1\25\3\37\1\53\1\37"+
    "\1\37\2\37\1\21\3\37\2\37\1\51\2\37\1\24\2\37\1\43"+
    "\1\41\1\42\1\35\1\37\1\57\1\65\1\15\1\63\1\67\1\62"+
    "\1\55\1\44\1\74\1\46\1\37\1\66\1\73\1\45\1\70\1\20"+
    "\1\72\1\37\1\64\1\47\1\56\1\50\1\40\1\75\1\23\1\71"+
    "\1\37\1\61\1\34\1\36\1\26\41\0\1\1\u15df\0\1\1\u097f\0"+
    "\13\1\35\0\2\2\5\0\1\1\57\0\1\1\u0fa0\0\1\1\ucefe\0"+
    "\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u0110\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\2\5\1\6\2\4"+
    "\1\6\7\4\1\7\1\2\2\6\1\10\2\6\1\1"+
    "\7\6\1\11\1\12\1\13\1\14\1\12\1\13\1\0"+
    "\1\15\1\0\1\3\3\0\1\5\4\0\1\6\1\4"+
    "\3\6\1\16\1\17\10\6\2\0\1\20\1\0\6\6"+
    "\1\21\5\6\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\4\0\1\30\1\31\1\32\2\6\1\33\4\6\1\34"+
    "\2\6\1\35\3\6\2\0\13\6\1\36\3\6\12\27"+
    "\1\0\1\15\1\6\1\37\7\6\1\40\1\6\1\0"+
    "\1\20\2\0\2\6\1\41\2\6\1\42\7\6\1\43"+
    "\1\6\1\44\2\6\1\45\4\6\1\46\2\6\1\47"+
    "\1\6\1\50\1\51\4\6\1\52\1\53\1\54\1\6"+
    "\1\55\2\6\1\56\1\6\1\57\1\6\1\60\2\6"+
    "\1\61\1\6\1\62\1\6\1\63\2\6\1\64\1\6"+
    "\1\65\1\66\1\67\1\6\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\275"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\275\0\u04ec"+
    "\0\u052b\0\u056a\0\275\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\275\0\u081f\0\u085e"+
    "\0\275\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u091b\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0276\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0627\0\u0f42"+
    "\0\275\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u0276\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\275\0\275"+
    "\0\275\0\275\0\275\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u13b0\0\u13ef\0\u0276\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u0276\0\u152a\0\u1569\0\u0276\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u0276\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\275\0\u1c8c\0\275\0\u1ccb\0\u0276"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u0276"+
    "\0\u1ec3\0\u1f02\0\u0627\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u0276"+
    "\0\u203d\0\u207c\0\u0276\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u0276\0\u2274\0\u0276\0\u22b3\0\u22f2\0\u0276"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u0276\0\u242d\0\u246c\0\u0276"+
    "\0\u24ab\0\u0276\0\u0276\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u0276"+
    "\0\u0276\0\u0276\0\u25e6\0\u0276\0\u2625\0\u2664\0\u0276\0\u26a3"+
    "\0\u0276\0\u26e2\0\u0276\0\u2721\0\u2760\0\u0276\0\u279f\0\u0276"+
    "\0\u27de\0\u0276\0\u281d\0\u285c\0\u0276\0\u289b\0\u0276\0\u0276"+
    "\0\u0276\0\u28da\0\u0276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\14\1\13\2\14\1\13"+
    "\3\14\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\10\1\27\1\14\1\30\1\4\2\20\2\14\1\31"+
    "\1\32\4\14\1\33\1\34\1\35\1\36\1\14\1\20"+
    "\1\37\1\40\1\41\2\14\1\42\1\43\1\44\3\14"+
    "\1\45\1\46\3\47\2\5\34\47\1\50\34\47\1\51"+
    "\3\52\2\5\34\52\1\53\12\52\1\51\22\52\102\0"+
    "\1\5\73\0\2\54\3\0\1\55\1\56\21\54\1\57"+
    "\10\54\1\60\1\0\1\61\33\54\30\0\1\20\55\0"+
    "\1\62\2\63\5\0\1\63\2\0\1\63\63\0\1\63"+
    "\2\0\1\64\2\0\2\65\1\0\2\66\1\0\2\67"+
    "\35\0\1\64\23\0\1\63\2\13\1\64\4\0\1\13"+
    "\2\0\1\13\37\0\1\64\24\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\14\14\14\0\1\20\14\0\1\20\62\0\1\20"+
    "\13\0\1\20\56\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\2\14"+
    "\1\70\11\14\30\0\1\10\1\20\76\0\1\10\1\20"+
    "\75\0\1\20\1\71\75\0\1\10\76\0\1\20\2\0"+
    "\1\20\73\0\1\20\3\0\1\20\52\0\3\14\2\0"+
    "\3\14\1\72\5\14\11\0\2\14\3\0\10\14\1\0"+
    "\2\14\1\0\1\14\1\0\3\14\1\73\10\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\1\14\1\74"+
    "\6\14\1\0\1\75\1\14\1\0\1\14\1\0\6\14"+
    "\1\76\5\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\4\14\1\77\3\14\1\0\2\14\1\0\1\14"+
    "\1\0\13\14\1\100\11\0\3\14\2\0\3\14\1\101"+
    "\5\14\11\0\2\14\3\0\2\14\1\102\1\14\1\103"+
    "\3\14\1\0\2\14\1\0\1\14\1\0\14\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\10\14\1\0"+
    "\2\14\1\0\1\14\1\0\2\14\1\104\4\14\1\105"+
    "\2\14\1\106\1\14\1\0\41\107\1\110\15\107\1\111"+
    "\1\112\16\107\10\0\3\14\2\0\6\14\1\113\2\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\11\14\1\114\2\14\11\0\3\14\2\0\3\14"+
    "\1\115\5\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\3\14\1\116\5\14\1\117\2\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\1\120\13\14\11\0"+
    "\3\14\2\0\3\14\1\121\5\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\1\122\13\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\1\123\13\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\2\14\1\124"+
    "\5\14\1\0\2\14\1\0\1\14\1\0\14\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\2\14\1\125"+
    "\5\14\1\0\2\14\1\0\1\14\1\0\12\14\1\126"+
    "\1\14\1\0\3\47\2\0\34\47\1\0\34\47\57\0"+
    "\1\127\5\0\1\130\3\0\1\131\5\0\1\132\3\52"+
    "\2\0\34\52\1\0\12\52\1\0\22\52\54\0\1\133"+
    "\1\0\1\127\5\0\1\130\3\0\1\131\6\0\2\54"+
    "\3\0\1\134\33\54\1\60\1\0\1\61\33\54\2\55"+
    "\3\0\72\55\6\135\1\136\70\135\2\54\3\0\72\54"+
    "\2\61\3\0\34\61\1\137\1\54\1\0\33\61\7\0"+
    "\1\20\77\0\2\63\1\64\4\0\1\63\2\0\1\63"+
    "\37\0\1\64\24\0\2\63\1\0\2\140\2\0\1\63"+
    "\2\0\1\63\64\0\1\141\6\0\1\141\67\0\1\142"+
    "\6\0\1\142\2\0\1\142\64\0\3\143\2\0\3\143"+
    "\2\0\1\143\2\0\1\143\24\0\1\143\2\0\1\143"+
    "\4\0\2\143\1\0\1\143\1\0\1\143\17\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\144\13\14\31\0\1\20\1\10"+
    "\55\0\3\14\2\0\11\14\11\0\2\14\3\0\2\14"+
    "\1\145\5\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\2\14\1\146\11\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\10\14\1\147\3\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\3\14"+
    "\1\150\4\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\10\14\1\151\3\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\2\14"+
    "\1\152\5\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\2\14\1\153\11\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\6\14\1\154\5\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\6\14\1\155\5\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\7\14\1\156\4\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\10\14\1\157\3\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\2\14"+
    "\1\160\5\14\1\0\2\14\1\0\1\14\1\0\2\14"+
    "\1\161\11\14\1\0\2\107\3\0\3\107\1\162\12\107"+
    "\1\163\134\107\1\111\15\107\10\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\1\14\1\164\1\0"+
    "\1\14\1\0\10\14\1\165\3\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\3\14\1\166\4\14\1\0"+
    "\2\14\1\0\1\14\1\0\14\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\2\14\1\0"+
    "\1\14\1\0\6\14\1\167\5\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\3\14\1\170\4\14\1\0"+
    "\1\14\1\171\1\0\1\14\1\0\14\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\3\14\1\172\10\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\1\14"+
    "\1\173\1\0\1\14\1\0\14\14\11\0\3\14\2\0"+
    "\1\174\10\14\11\0\2\14\3\0\10\14\1\0\1\175"+
    "\1\14\1\0\1\14\1\0\11\14\1\176\2\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\10\14\1\0"+
    "\2\14\1\0\1\14\1\0\13\14\1\177\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\200\13\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\1\14\1\201"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\2\14\1\202\5\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\24\0\1\203\1\204\17\0"+
    "\1\205\1\206\1\207\1\210\1\211\1\212\1\213\1\214"+
    "\23\0\6\135\1\215\70\135\5\0\1\216\1\136\70\0"+
    "\2\61\3\0\72\61\10\0\2\63\5\0\1\63\2\0"+
    "\1\63\64\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\3\14\1\217"+
    "\10\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\5\14\1\220"+
    "\6\14\11\0\3\14\2\0\3\14\1\221\5\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\14\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\1\14\1\222\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\1\223\13\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\10\14\1\0"+
    "\1\14\1\224\1\0\1\14\1\0\14\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\3\14\1\225\10\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\14\1\226\12\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\227\13\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\3\14\1\230\4\14\1\0"+
    "\2\14\1\0\1\14\1\0\14\14\11\0\3\14\2\0"+
    "\3\14\1\231\5\14\11\0\2\14\3\0\10\14\1\0"+
    "\2\14\1\0\1\14\1\0\14\14\1\0\41\107\1\232"+
    "\15\107\1\233\1\234\16\107\10\0\3\235\2\0\3\235"+
    "\2\0\1\235\2\0\1\235\24\0\1\235\2\0\1\235"+
    "\4\0\2\235\1\0\1\235\1\0\1\235\17\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\236\13\14\11\0\3\14\2\0"+
    "\3\14\1\237\5\14\11\0\2\14\3\0\10\14\1\0"+
    "\2\14\1\0\1\14\1\0\14\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\2\14\1\0"+
    "\1\14\1\0\1\240\13\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\3\14\1\241\4\14\1\0\1\14"+
    "\1\242\1\0\1\14\1\0\14\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\2\14\1\0"+
    "\1\14\1\0\1\243\13\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\1\14\1\244\12\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\3\14\1\245\4\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\4\14\1\246\3\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\4\14\1\247\3\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\3\14\1\250\10\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\1\251\13\14\11\0\3\14\2\0\11\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\11\14\1\252\2\14\11\0\3\14\2\0\11\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\12\14\1\253\1\14\11\0\3\14\2\0\11\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\11\14\1\254\2\14\25\0\1\204\22\0\1\210\1\211"+
    "\1\212\1\213\1\214\72\0\1\210\1\211\1\212\1\213"+
    "\1\214\46\0\1\203\1\204\20\0\1\206\1\207\1\210"+
    "\1\211\1\212\1\213\1\214\46\0\1\203\1\204\21\0"+
    "\1\207\1\210\1\211\1\212\1\213\1\214\46\0\1\203"+
    "\1\204\22\0\1\210\1\211\1\212\1\213\1\214\73\0"+
    "\1\211\1\212\1\213\1\214\74\0\1\212\1\213\1\214"+
    "\75\0\1\213\1\214\76\0\1\214\23\0\5\135\1\216"+
    "\1\215\70\135\10\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\4\14"+
    "\1\255\7\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\2\14"+
    "\1\256\11\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\3\14"+
    "\1\257\10\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\2\14"+
    "\1\260\11\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\1\14"+
    "\1\261\12\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\11\14"+
    "\1\262\2\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\1\14\1\263\1\0\1\14\1\0"+
    "\14\14\11\0\3\14\2\0\3\14\1\264\5\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\14\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\13\14\1\265"+
    "\1\0\10\107\1\162\30\107\1\232\15\107\1\233\1\234"+
    "\57\107\1\232\15\107\1\233\1\234\1\233\15\107\10\0"+
    "\3\107\2\0\3\107\2\0\1\107\2\0\1\107\24\0"+
    "\1\107\2\0\1\107\4\0\2\107\1\0\1\107\1\0"+
    "\1\107\17\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\6\14\1\266"+
    "\5\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\2\14\1\267"+
    "\11\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\1\14\1\270\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\2\14"+
    "\1\271\5\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\12\14\1\272\1\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\3\14"+
    "\1\273\4\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\2\14\1\274\11\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\1\275"+
    "\7\14\1\0\2\14\1\0\1\14\1\0\14\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\4\14\1\276"+
    "\3\14\1\0\2\14\1\0\1\14\1\0\14\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\10\14\1\0"+
    "\1\14\1\277\1\0\1\14\1\0\14\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\5\14\1\300\6\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\301\13\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\1\14\1\302"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\6\14\1\303\5\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\12\14\1\304\1\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\11\14\1\305\2\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\2\14\1\306\5\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\1\307\1\14\1\0"+
    "\1\14\1\0\14\14\11\0\3\14\2\0\11\14\11\0"+
    "\2\14\3\0\10\14\1\0\2\14\1\0\1\14\1\0"+
    "\5\14\1\310\6\14\11\0\3\14\2\0\11\14\11\0"+
    "\2\14\3\0\10\14\1\0\1\14\1\311\1\0\1\14"+
    "\1\0\14\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\6\14"+
    "\1\312\5\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\6\14"+
    "\1\313\5\14\11\0\3\14\2\0\11\14\11\0\2\14"+
    "\3\0\1\314\7\14\1\0\2\14\1\0\1\14\1\0"+
    "\14\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\11\14\1\315"+
    "\2\14\11\0\3\14\2\0\11\14\11\0\2\14\3\0"+
    "\10\14\1\0\2\14\1\0\1\14\1\0\1\316\13\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\1\14\1\317\12\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\7\14\1\320\4\14"+
    "\11\0\3\14\2\0\3\14\1\321\5\14\11\0\2\14"+
    "\3\0\10\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\3\14"+
    "\1\322\4\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\4\14"+
    "\1\323\3\14\1\0\2\14\1\0\1\14\1\0\14\14"+
    "\11\0\3\14\2\0\11\14\11\0\2\14\3\0\10\14"+
    "\1\0\2\14\1\0\1\14\1\0\1\324\13\14\11\0"+
    "\3\14\2\0\11\14\11\0\2\14\3\0\10\14\1\0"+
    "\1\14\1\325\1\0\1\14\1\0\14\14\11\0\3\14"+
    "\2\0\11\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\1\326\13\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\2\14\1\0"+
    "\1\14\1\0\6\14\1\327\5\14\11\0\3\14\2\0"+
    "\11\14\11\0\2\14\3\0\10\14\1\0\2\14\1\0"+
    "\1\14\1\0\1\330\13\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\2\14\1\0\1\14"+
    "\1\0\2\14\1\331\11\14\11\0\3\14\2\0\3\14"+
    "\1\332\5\14\11\0\2\14\3\0\10\14\1\0\2\14"+
    "\1\0\1\14\1\0\14\14\11\0\3\14\2\0\11\14"+
    "\11\0\2\14\3\0\10\14\1\0\1\333\1\14\1\0"+
    "\1\14\1\0\14\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\1\11\6\1\1\11\3\1\1\11"+
    "\12\1\1\11\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\3\0\1\1\4\0\17\1\2\0\1\11\1\0"+
    "\14\1\5\11\1\1\4\0\21\1\2\0\30\1\1\11"+
    "\1\0\1\11\13\1\1\0\1\1\2\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	HashMap<String,Integer> table = new HashMap<String,Integer>();
	
	int lastKey = 0;

	private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}

	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	public static void main(String argv[]) {
	    if (argv.length == 0) {
	      System.out.println("Usage : java JavascriptLexer [ --encoding <name> ] <inputfile(s)>");
	    }
	    else {
	      int firstFilePos = 0;
	      String encodingName = "UTF-8";
	      if (argv[0].equals("--encoding")) {
	        firstFilePos = 2;
	        encodingName = argv[1];
	        try {
	          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
	        } catch (Exception e) {
	          System.out.println("Invalid encoding '" + encodingName + "'");
	          return;
	        }
	      }
	      for (int i = firstFilePos; i < argv.length; i++) {
	        JavascriptLexer scanner = null;
	        try {
	          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
	          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
	          scanner = new JavascriptLexer(reader);
	          do {
	        	  Symbol current = scanner.yylex();
	        	  if(current!=null&&current.value!=null){
	        		  System.out.printf("%s , %s\n", current.toString(),current.value.toString());
	        	  }
	            System.out.println(current);
	          } while (!scanner.zzAtEOF);

	        }
	        catch (java.io.FileNotFoundException e) {
	          System.out.println("File not found : \""+argv[i]+"\"");
	        }
	        catch (java.io.IOException e) {
	          System.out.println("IO error scanning file \""+argv[i]+"\"");
	          System.out.println(e);
	        }
	        catch (Exception e) {
	          System.out.println("Unexpected exception:");
	          e.printStackTrace();
	        }
	      }
	    }
	  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JavascriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING1: {
              throw new Exception("ERROR: String not closed before end of file");
            }
            case 220: break;
            case STRING2: {
              throw new Exception("ERROR: String not closed before end of file");
            }
            case 221: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
													yytext()+"> at row "+(yyline+1)+" column "+yycolumn);
            }
          case 57: break;
          case 2: 
            { 
            }
          case 58: break;
          case 3: 
            { return symbol(sym.DIVPUNCTUATOR, yytext());
            }
          case 59: break;
          case 4: 
            { return symbol(sym.PUNCTUATOR, yytext());
            }
          case 60: break;
          case 5: 
            { return symbol(sym.DECIMALLITERAL, yytext());
            }
          case 61: break;
          case 6: 
            { if(table.containsKey(yytext())){
										return symbol(sym.IDENTIFIERNAME, table.get(yytext()));
									}
									else{
										table.put(yytext(),lastKey);
										lastKey++;
										return symbol(sym.IDENTIFIERNAME, lastKey-1);
									}
            }
          case 62: break;
          case 7: 
            { return symbol(sym.RBPUNCTUATOR);
            }
          case 63: break;
          case 8: 
            { string.setLength(0); yybegin(STRING2);
            }
          case 64: break;
          case 9: 
            { string.setLength(0); yybegin(STRING1);
            }
          case 65: break;
          case 10: 
            { string.append( yytext() );
            }
          case 66: break;
          case 11: 
            { string.append('\\');
            }
          case 67: break;
          case 12: 
            { yybegin(YYINITIAL); 
								   return symbol(sym.STRING_LITERAL, 
								   string.toString());
            }
          case 68: break;
          case 13: 
            { return symbol(sym.COMMENT);
            }
          case 69: break;
          case 14: 
            { return symbol(sym.IF);
            }
          case 70: break;
          case 15: 
            { return symbol(sym.IN);
            }
          case 71: break;
          case 16: 
            { return symbol(sym.TEMPLATE, yytext());
            }
          case 72: break;
          case 17: 
            { return symbol(sym.DO);
            }
          case 73: break;
          case 18: 
            { string.append('\t');
            }
          case 74: break;
          case 19: 
            { string.append('\r');
            }
          case 75: break;
          case 20: 
            { string.append('\n');
            }
          case 76: break;
          case 21: 
            { string.append('\'');
            }
          case 77: break;
          case 22: 
            { string.append('\"');
            }
          case 78: break;
          case 23: 
            { return symbol(sym.REGEXLITERAL, yytext());
            }
          case 79: break;
          case 24: 
            { return symbol(sym.BYNARYLITERAL, yytext());
            }
          case 80: break;
          case 25: 
            { return symbol(sym.OCTALLITERAL, yytext());
            }
          case 81: break;
          case 26: 
            { return symbol(sym.HEXLITERAL, yytext());
            }
          case 82: break;
          case 27: 
            { return symbol(sym.VAR);
            }
          case 83: break;
          case 28: 
            { return symbol(sym.FOR);
            }
          case 84: break;
          case 29: 
            { return symbol(sym.TRY);
            }
          case 85: break;
          case 30: 
            { return symbol(sym.NEW);
            }
          case 86: break;
          case 31: 
            { return symbol(sym.VOID);
            }
          case 87: break;
          case 32: 
            { return symbol(sym.THIS);
            }
          case 88: break;
          case 33: 
            { return symbol(sym.ELSE);
            }
          case 89: break;
          case 34: 
            { return symbol(sym.CASE);
            }
          case 90: break;
          case 35: 
            { return symbol(sym.WITH);
            }
          case 91: break;
          case 36: 
            { return symbol(sym.BREAK);
            }
          case 92: break;
          case 37: 
            { return symbol(sym.SUPER);
            }
          case 93: break;
          case 38: 
            { return symbol(sym.THROW);
            }
          case 94: break;
          case 39: 
            { return symbol(sym.CONST);
            }
          case 95: break;
          case 40: 
            { return symbol(sym.CATCH);
            }
          case 96: break;
          case 41: 
            { return symbol(sym.CLASS);
            }
          case 97: break;
          case 42: 
            { return symbol(sym.YIELD);
            }
          case 98: break;
          case 43: 
            { return symbol(sym.WHILE);
            }
          case 99: break;
          case 44: 
            { return symbol(sym.IMPORT);
            }
          case 100: break;
          case 45: 
            { return symbol(sym.SWITCH);
            }
          case 101: break;
          case 46: 
            { return symbol(sym.TYPEOF);
            }
          case 102: break;
          case 47: 
            { return symbol(sym.EXPORT);
            }
          case 103: break;
          case 48: 
            { return symbol(sym.RETURN);
            }
          case 104: break;
          case 49: 
            { return symbol(sym.DELETE);
            }
          case 105: break;
          case 50: 
            { return symbol(sym.FINALLY);
            }
          case 106: break;
          case 51: 
            { return symbol(sym.EXTENDS);
            }
          case 107: break;
          case 52: 
            { return symbol(sym.DEFAULT);
            }
          case 108: break;
          case 53: 
            { return symbol(sym.FUNCTION);
            }
          case 109: break;
          case 54: 
            { return symbol(sym.CONTINUE);
            }
          case 110: break;
          case 55: 
            { return symbol(sym.DEBUGGER);
            }
          case 111: break;
          case 56: 
            { return symbol(sym.INSTANCEOF);
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
