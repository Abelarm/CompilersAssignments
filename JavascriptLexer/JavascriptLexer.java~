/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
import java.util.HashMap;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>JavaScript.jflex</tt>
 */
class JavascriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING1 = 2;
  public static final int STRING2 = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\105\1\106\1\4\22\0\1\1\1\36\1\63"+
    "\1\0\1\67\1\34\1\37\1\104\1\26\1\27\1\6\1\13\1\32"+
    "\1\14\1\7\1\5\1\10\1\17\6\22\2\11\1\33\1\0\1\42"+
    "\1\45\1\43\1\44\1\0\1\61\1\16\2\25\1\12\1\25\3\50"+
    "\1\62\1\50\1\50\2\50\1\21\3\50\2\50\1\60\2\50\1\24"+
    "\2\50\1\30\1\52\1\31\1\41\1\50\1\66\1\73\1\15\1\71"+
    "\1\75\1\70\1\64\1\53\1\102\1\55\1\50\1\74\1\101\1\54"+
    "\1\76\1\20\1\100\1\50\1\72\1\56\1\65\1\57\1\51\1\103"+
    "\1\23\1\77\1\50\1\46\1\40\1\47\1\35\6\0\1\105\32\0"+
    "\1\1\u15df\0\1\1\u097f\0\13\1\35\0\1\2\1\2\5\0\1\1"+
    "\57\0\1\1\u0fa0\0\1\1\ucefe\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u0110\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\2\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\2\3\7\1\34"+
    "\2\7\1\1\10\7\1\35\1\36\1\37\1\40\1\36"+
    "\1\37\1\2\1\0\1\41\1\42\1\0\1\43\1\0"+
    "\1\44\1\0\1\45\1\0\1\6\4\0\1\46\1\47"+
    "\1\50\1\51\1\7\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\4\7\1\70\1\71\14\7\2\0\1\72\1\0"+
    "\6\7\1\73\7\7\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\0\1\103\1\104\1\0\1\105\1\106"+
    "\1\107\1\7\1\110\1\111\1\112\1\113\1\114\1\7"+
    "\1\115\1\116\4\7\1\117\1\7\1\120\4\7\1\121"+
    "\4\7\2\0\14\7\1\122\1\7\1\123\2\7\12\102"+
    "\1\7\1\124\1\125\7\7\1\126\2\7\1\127\1\7"+
    "\1\0\1\72\2\0\2\7\1\130\2\7\1\131\6\7"+
    "\1\132\1\7\1\133\1\7\1\134\2\7\1\135\6\7"+
    "\1\136\2\7\1\137\1\7\1\140\1\141\4\7\1\142"+
    "\1\143\1\144\1\7\1\145\1\146\2\7\1\147\1\150"+
    "\1\7\1\151\1\7\1\152\2\7\1\153\1\7\1\154"+
    "\1\7\1\155\2\7\1\156\1\7\1\157\1\160\1\161"+
    "\1\7\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u0470"+
    "\0\u011c\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u011c"+
    "\0\u0661\0\u011c\0\u011c\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u011c"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u011c\0\u0ad1\0\u0b18\0\u011c\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u011c\0\u0cc2\0\u0c34\0\u0d09"+
    "\0\u011c\0\u0d50\0\u011c\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u011c\0\u011c\0\u011c\0\u011c\0\u0f41\0\u030d\0\u011c"+
    "\0\u0f88\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u0fcf\0\u011c"+
    "\0\u1016\0\u011c\0\u011c\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u030d\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u0852\0\u155b"+
    "\0\u011c\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u030d\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u1984\0\u19cb"+
    "\0\u011c\0\u011c\0\u1a12\0\u0e6c\0\u0eb3\0\u0efa\0\u1a59\0\u011c"+
    "\0\u011c\0\u1aa0\0\u011c\0\u011c\0\u1ae7\0\u030d\0\u030d\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u030d\0\u1c4a\0\u030d\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u030d\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u030d\0\u22ab\0\u030d"+
    "\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u25b8\0\u011c\0\u25ff\0\u011c\0\u030d\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u030d\0\u2837"+
    "\0\u287e\0\u030d\0\u28c5\0\u290c\0\u0852\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u030d\0\u2a6f\0\u2ab6\0\u030d\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u030d\0\u2ca7\0\u030d\0\u2cee\0\u030d"+
    "\0\u2d35\0\u2d7c\0\u030d\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u030d\0\u2f6d\0\u2fb4\0\u030d\0\u2ffb\0\u030d\0\u030d"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u030d\0\u030d\0\u030d\0\u315e"+
    "\0\u030d\0\u030d\0\u31a5\0\u31ec\0\u030d\0\u030d\0\u3233\0\u030d"+
    "\0\u327a\0\u030d\0\u32c1\0\u3308\0\u030d\0\u334f\0\u030d\0\u3396"+
    "\0\u030d\0\u33dd\0\u3424\0\u030d\0\u346b\0\u030d\0\u030d\0\u030d"+
    "\0\u34b2\0\u030d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\15\1\14\1\21\1\15"+
    "\1\14\3\15\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\15\1\44\1\5\1\45"+
    "\1\15\1\46\1\47\4\15\1\50\1\51\1\52\1\53"+
    "\1\15\1\54\1\55\1\56\2\15\1\57\1\60\1\61"+
    "\1\15\1\62\1\15\1\63\1\64\1\5\1\6\3\65"+
    "\2\6\45\65\1\66\31\65\1\67\2\65\3\70\2\6"+
    "\45\70\1\71\10\70\1\67\23\70\2\6\1\5\3\6"+
    "\1\72\76\6\2\5\112\0\1\6\103\0\2\73\3\0"+
    "\1\74\1\75\21\73\1\76\1\0\13\73\1\77\4\73"+
    "\1\100\34\73\5\0\1\101\1\102\36\0\1\103\50\0"+
    "\1\104\2\105\5\0\1\105\2\0\1\105\73\0\1\105"+
    "\2\0\1\106\2\0\2\107\1\0\2\110\1\0\2\111"+
    "\43\0\1\106\25\0\1\105\2\14\1\106\4\0\1\14"+
    "\2\0\1\14\45\0\1\106\26\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\15\15"+
    "\16\0\1\112\31\0\1\113\55\0\1\114\30\0\1\115"+
    "\51\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\3\15\1\116\11\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\1\117"+
    "\1\15\1\0\15\15\50\0\1\120\106\0\1\121\100\0"+
    "\1\122\5\0\1\123\101\0\1\124\4\0\1\125\106\0"+
    "\1\126\103\0\1\127\2\0\1\130\104\0\1\131\1\0"+
    "\1\132\104\0\1\133\1\0\1\134\51\0\3\15\2\0"+
    "\3\15\1\135\5\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\4\15\1\136\10\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\1\15\1\137\13\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\1\15\1\140\6\15\1\0\1\141\1\15"+
    "\1\0\7\15\1\142\5\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\4\15\1\143\3\15\1\0\1\15"+
    "\1\144\1\0\1\15\1\145\12\15\1\146\13\0\3\15"+
    "\2\0\3\15\1\147\5\15\22\0\2\15\1\0\2\15"+
    "\1\150\1\15\1\151\3\15\1\0\2\15\1\0\4\15"+
    "\1\152\10\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\3\15\1\153\1\154"+
    "\3\15\1\155\2\15\1\156\1\15\3\0\52\157\1\160"+
    "\13\157\1\161\1\162\17\157\10\0\3\15\2\0\6\15"+
    "\1\163\2\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\12\15\1\164\2\15\13\0\3\15\2\0\3\15"+
    "\1\165\5\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\4\15\1\166\5\15\1\167\2\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\1\15\1\170\13\15\13\0\3\15\2\0\3\15"+
    "\1\171\5\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\1\15\1\172\13\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\4\15\1\173\3\15\1\0\2\15"+
    "\1\0\1\15\1\174\13\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\2\15\1\175\5\15\1\0\2\15"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\1\15\1\176\13\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\2\15"+
    "\1\177\5\15\1\0\2\15\1\0\13\15\1\200\1\15"+
    "\3\0\3\65\2\0\45\65\1\0\31\65\1\0\2\65"+
    "\65\0\1\201\4\0\1\202\3\0\1\203\5\0\1\204"+
    "\2\0\3\70\2\0\45\70\1\0\10\70\1\0\23\70"+
    "\63\0\1\205\1\0\1\201\4\0\1\202\3\0\1\203"+
    "\15\0\1\206\101\0\2\73\3\0\1\207\22\73\1\76"+
    "\1\0\20\73\1\100\34\73\2\74\3\0\102\74\2\76"+
    "\3\0\23\76\1\0\1\73\20\76\1\210\34\76\2\73"+
    "\3\0\102\73\45\0\1\211\50\0\1\212\107\0\2\105"+
    "\1\106\4\0\1\105\2\0\1\105\45\0\1\106\26\0"+
    "\2\105\1\0\2\213\2\0\1\105\2\0\1\105\74\0"+
    "\1\214\6\0\1\214\77\0\1\215\6\0\1\215\2\0"+
    "\1\215\74\0\3\216\2\0\3\216\2\0\1\216\2\0"+
    "\1\216\33\0\1\216\2\0\1\216\3\0\2\216\1\0"+
    "\1\216\1\0\1\216\21\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\1\15\1\217"+
    "\13\15\50\0\1\220\106\0\1\221\104\0\1\222\1\0"+
    "\1\223\106\0\1\224\51\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\2\15\1\225\5\15\1\0\2\15\1\0"+
    "\15\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\3\15\1\226\11\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\1\15\1\227\1\0\15\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\11\15"+
    "\1\230\3\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\3\15\1\231\4\15\1\0\2\15\1\0\15\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\11\15\1\232\3\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\4\15\1\233\10\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\1\15\1\234\1\0"+
    "\15\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\2\15\1\235\5\15\1\0\2\15\1\0\15\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\3\15\1\236\11\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\7\15\1\237\5\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\7\15\1\240"+
    "\5\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\12\15\1\241\2\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\4\15\1\242"+
    "\3\15\1\0\2\15\1\0\10\15\1\243\4\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\3\15\1\244\11\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\11\15\1\245\3\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\2\15\1\246\5\15\1\0\2\15\1\0"+
    "\3\15\1\247\11\15\3\0\2\157\3\0\3\157\1\250"+
    "\12\157\1\251\131\157\1\161\40\157\10\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\252"+
    "\1\0\11\15\1\253\3\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\3\15\1\254\4\15\1\0\2\15"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\7\15\1\255\5\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\3\15"+
    "\1\256\4\15\1\0\1\15\1\257\1\0\15\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\4\15\1\260\10\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\261"+
    "\1\0\15\15\13\0\3\15\2\0\1\262\10\15\22\0"+
    "\2\15\1\0\10\15\1\0\1\263\1\15\1\0\12\15"+
    "\1\264\2\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\12\15\1\265\2\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\14\15\1\266\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\1\15\1\267\13\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\1\15\1\270\1\0\15\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\1\15\1\271\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\2\15\1\272\5\15\1\0"+
    "\2\15\1\0\15\15\26\0\1\273\1\274\26\0\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\303\1\304\24\0"+
    "\2\76\3\0\102\76\10\0\2\105\5\0\1\105\2\0"+
    "\1\105\74\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\4\15\1\305\10\15\50\0"+
    "\1\306\51\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\6\15\1\307\6\15\13\0"+
    "\3\15\2\0\3\15\1\310\5\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\311"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\1\15\1\312\13\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\1\15\1\313\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\314"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\4\15\1\315\10\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\2\15\1\316\12\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\3\15\1\242\4\15"+
    "\1\0\2\15\1\0\15\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\1\15"+
    "\1\317\13\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\1\320\7\15\1\0\2\15\1\0\15\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\1\15\1\321\13\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\3\15\1\322\4\15\1\0"+
    "\2\15\1\0\15\15\13\0\3\15\2\0\3\15\1\323"+
    "\5\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\15\15\3\0\52\157\1\324\13\157\1\325\1\326\17\157"+
    "\10\0\3\327\2\0\3\327\2\0\1\327\2\0\1\327"+
    "\33\0\1\327\2\0\1\327\3\0\2\327\1\0\1\327"+
    "\1\0\1\327\21\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\1\15\1\330\13\15"+
    "\13\0\3\15\2\0\3\15\1\331\5\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\15\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\1\15\1\332\13\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\3\15\1\333\4\15\1\0\1\15"+
    "\1\334\1\0\15\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\1\15\1\335"+
    "\13\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\2\15\1\336\12\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\3\15\1\337"+
    "\4\15\1\0\2\15\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\4\15\1\340\3\15\1\0"+
    "\2\15\1\0\15\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\4\15\1\341\3\15\1\0\2\15\1\0"+
    "\15\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\4\15\1\342\10\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\1\15\1\343\13\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\12\15\1\344\2\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\12\15\1\345"+
    "\2\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\13\15\1\346\1\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\12\15\1\347\2\15\27\0\1\274\31\0"+
    "\1\300\1\301\1\302\1\303\1\304\102\0\1\300\1\301"+
    "\1\302\1\303\1\304\47\0\1\273\1\274\27\0\1\276"+
    "\1\277\1\300\1\301\1\302\1\303\1\304\47\0\1\273"+
    "\1\274\30\0\1\277\1\300\1\301\1\302\1\303\1\304"+
    "\47\0\1\273\1\274\31\0\1\300\1\301\1\302\1\303"+
    "\1\304\103\0\1\301\1\302\1\303\1\304\104\0\1\302"+
    "\1\303\1\304\105\0\1\303\1\304\106\0\1\304\34\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\5\15\1\350\7\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\3\15\1\351\11\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\4\15\1\352"+
    "\10\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\3\15\1\353\11\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\2\15\1\354"+
    "\5\15\1\0\2\15\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\2\15\1\355\12\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\12\15\1\356"+
    "\2\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\1\15\1\357\1\0\15\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\1\15\1\360\13\15\13\0\3\15\2\0\3\15"+
    "\1\361\5\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\14\15\1\362\3\0"+
    "\10\157\1\250\41\157\1\324\13\157\1\325\1\326\65\157"+
    "\1\325\3\157\1\324\13\157\1\325\1\326\17\157\10\0"+
    "\3\157\2\0\3\157\2\0\1\157\2\0\1\157\33\0"+
    "\1\157\2\0\1\157\3\0\2\157\1\0\1\157\1\0"+
    "\1\157\21\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\7\15\1\363\5\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\3\15\1\364\11\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\365"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\2\15\1\366\5\15\1\0\2\15\1\0\15\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\13\15\1\367\1\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\3\15\1\370\4\15"+
    "\1\0\2\15\1\0\15\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\3\15"+
    "\1\371\11\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\1\372\7\15\1\0\2\15\1\0\15\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\4\15\1\373"+
    "\3\15\1\0\2\15\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\1\15\1\374"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\6\15\1\375\6\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\1\15\1\376\13\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\1\15"+
    "\1\377\1\0\15\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\7\15\1\u0100"+
    "\5\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\2\15\1\u0101\12\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\13\15\1\u0102\1\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\12\15\1\u0103\2\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\2\15\1\u0104\5\15\1\0\2\15\1\0"+
    "\15\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\1\15\1\u0105\1\0\15\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\1\u0106"+
    "\1\15\1\0\15\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\6\15\1\u0107"+
    "\6\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\1\15\1\u0108\1\0\15\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\7\15\1\u0109\5\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\7\15"+
    "\1\u010a\5\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\1\u010b\7\15\1\0\2\15\1\0\15\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\2\15\1\0\12\15\1\u010c\2\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\10\15\1\0\2\15\1\0"+
    "\1\15\1\u010d\13\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\10\15\1\0\2\15\1\0\2\15\1\u010e"+
    "\12\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\10\15\1\u010f\4\15\13\0"+
    "\3\15\2\0\3\15\1\u0110\5\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\15\15\13\0\3\15\2\0"+
    "\11\15\22\0\2\15\1\0\3\15\1\u0111\4\15\1\0"+
    "\2\15\1\0\15\15\13\0\3\15\2\0\11\15\22\0"+
    "\2\15\1\0\4\15\1\u0112\3\15\1\0\2\15\1\0"+
    "\15\15\13\0\3\15\2\0\11\15\22\0\2\15\1\0"+
    "\10\15\1\0\2\15\1\0\1\15\1\u0113\13\15\13\0"+
    "\3\15\2\0\11\15\22\0\2\15\1\0\10\15\1\0"+
    "\1\15\1\u0114\1\0\15\15\13\0\3\15\2\0\11\15"+
    "\22\0\2\15\1\0\10\15\1\0\2\15\1\0\1\15"+
    "\1\u0115\13\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\2\15\1\0\7\15\1\u0116\5\15"+
    "\13\0\3\15\2\0\11\15\22\0\2\15\1\0\10\15"+
    "\1\0\2\15\1\0\1\15\1\u0117\13\15\13\0\3\15"+
    "\2\0\11\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\3\15\1\u0118\11\15\13\0\3\15\2\0\3\15"+
    "\1\u0119\5\15\22\0\2\15\1\0\10\15\1\0\2\15"+
    "\1\0\15\15\13\0\3\15\2\0\11\15\22\0\2\15"+
    "\1\0\10\15\1\0\1\u011a\1\15\1\0\15\15\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13561];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\13\1\6\11\1\1\1\11\6\1\1\11"+
    "\1\1\2\11\4\1\1\11\13\1\1\11\2\1\1\11"+
    "\3\1\1\0\1\1\1\11\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\1\4\0\4\11\2\1\1\11"+
    "\1\1\5\11\1\1\1\11\1\1\2\11\23\1\2\0"+
    "\1\11\1\0\16\1\6\11\1\1\1\0\2\11\1\0"+
    "\4\1\2\11\1\1\2\11\23\1\2\0\32\1\1\11"+
    "\1\1\1\11\15\1\1\0\1\1\2\0\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	public HashMap<String,Integer> table = new HashMap<String,Integer>();
	
	int lastKey = 0;

	private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}

	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JavascriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING1: {
              return symbol(sym.ERROR_B,"EOF in string constant");
            }
            case 283: break;
            case STRING2: {
              return symbol(sym.ERROR_B,"EOF in string constant");
            }
            case 284: break;
            case COMMENT: {
              return symbol(sym.ERROR_B,"EOF in comment");
            }
            case 285: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.ERROR,"Illegal character <"+
													yytext()+"> at row "+(yyline+1)+" column "+yycolumn);
            }
          case 115: break;
          case 2: 
            { 
            }
          case 116: break;
          case 3: 
            { return symbol(sym.DIV);
            }
          case 117: break;
          case 4: 
            { return symbol(sym.STAR);
            }
          case 118: break;
          case 5: 
            { return symbol(sym.DOT);
            }
          case 119: break;
          case 6: 
            { return symbol(sym.DECIMALLITERAL, yytext());
            }
          case 120: break;
          case 7: 
            { if(table.containsKey(yytext())){
										return symbol(sym.IDENTIFIERNAME, table.get(yytext()));
									}
									else{
										table.put(yytext(),lastKey);
										lastKey++;
										return symbol(sym.IDENTIFIERNAME, lastKey-1);
									}
            }
          case 121: break;
          case 8: 
            { return symbol(sym.PLUS);
            }
          case 122: break;
          case 9: 
            { return symbol(sym.MINUS);
            }
          case 123: break;
          case 10: 
            { return symbol(sym.LPAR);
            }
          case 124: break;
          case 11: 
            { return symbol(sym.RPAR);
            }
          case 125: break;
          case 12: 
            { return symbol(sym.LSQPAR);
            }
          case 126: break;
          case 13: 
            { return symbol(sym.RSQPAR);
            }
          case 127: break;
          case 14: 
            { return symbol(sym.COMMA);
            }
          case 128: break;
          case 15: 
            { return symbol(sym.COLON);
            }
          case 129: break;
          case 16: 
            { return symbol(sym.MOD);
            }
          case 130: break;
          case 17: 
            { return symbol(sym.TILDE);
            }
          case 131: break;
          case 18: 
            { return symbol(sym.NOT);
            }
          case 132: break;
          case 19: 
            { return symbol(sym.AND);
            }
          case 133: break;
          case 20: 
            { return symbol(sym.OR);
            }
          case 134: break;
          case 21: 
            { return symbol(sym.HAT);
            }
          case 135: break;
          case 22: 
            { return symbol(sym.LANG);
            }
          case 136: break;
          case 23: 
            { return symbol(sym.RANG);
            }
          case 137: break;
          case 24: 
            { return symbol(sym.QUESTION);
            }
          case 138: break;
          case 25: 
            { return symbol(sym.ASSIGN);
            }
          case 139: break;
          case 26: 
            { return symbol(sym.LBPAR);
            }
          case 140: break;
          case 27: 
            { return symbol(sym.RBPAR);
            }
          case 141: break;
          case 28: 
            { string.setLength(0); yybegin(STRING2);
            }
          case 142: break;
          case 29: 
            { string.setLength(0); yybegin(STRING1);
            }
          case 143: break;
          case 30: 
            { string.append( yytext() );
            }
          case 144: break;
          case 31: 
            { string.append('\\');
            }
          case 145: break;
          case 32: 
            { yybegin(YYINITIAL); 
								   return symbol(sym.STRING_LITERAL, 
								   string.toString());
            }
          case 146: break;
          case 33: 
            { return symbol(sym.COMMENT);
            }
          case 147: break;
          case 34: 
            { yybegin(COMMENT);
            }
          case 148: break;
          case 35: 
            { return symbol(sym.DIVEQ);
            }
          case 149: break;
          case 36: 
            { return symbol(sym.ERROR, "Unmatched */");
            }
          case 150: break;
          case 37: 
            { return symbol(sym.STAREQ);
            }
          case 151: break;
          case 38: 
            { return symbol(sym.DPLUS);
            }
          case 152: break;
          case 39: 
            { return symbol(sym.PLUSEQ);
            }
          case 153: break;
          case 40: 
            { return symbol(sym.DMINUS);
            }
          case 154: break;
          case 41: 
            { return symbol(sym.MINUSEQ);
            }
          case 155: break;
          case 42: 
            { return symbol(sym.OF);
            }
          case 156: break;
          case 43: 
            { return symbol(sym.MODEQ);
            }
          case 157: break;
          case 44: 
            { return symbol(sym.NEQ);
            }
          case 158: break;
          case 45: 
            { return symbol(sym.LOGAND);
            }
          case 159: break;
          case 46: 
            { return symbol(sym.ANDEQ);
            }
          case 160: break;
          case 47: 
            { return symbol(sym.LOGOR);
            }
          case 161: break;
          case 48: 
            { return symbol(sym.OREQ);
            }
          case 162: break;
          case 49: 
            { return symbol(sym.HATEQ);
            }
          case 163: break;
          case 50: 
            { return symbol(sym.2LANG);
            }
          case 164: break;
          case 51: 
            { return symbol(sym.LEQ);
            }
          case 165: break;
          case 52: 
            { return symbol(sym.2RANG);
            }
          case 166: break;
          case 53: 
            { return symbol(sym.GEQ);
            }
          case 167: break;
          case 54: 
            { return symbol(sym.ARROW);
            }
          case 168: break;
          case 55: 
            { return symbol(sym.EQ);
            }
          case 169: break;
          case 56: 
            { return symbol(sym.IF);
            }
          case 170: break;
          case 57: 
            { return symbol(sym.IN);
            }
          case 171: break;
          case 58: 
            { return symbol(sym.TEMPLATE, yytext());
            }
          case 172: break;
          case 59: 
            { return symbol(sym.DO);
            }
          case 173: break;
          case 60: 
            { string.append('\t');
            }
          case 174: break;
          case 61: 
            { string.append('\r');
            }
          case 175: break;
          case 62: 
            { string.append('\n');
            }
          case 176: break;
          case 63: 
            { string.append('\'');
            }
          case 177: break;
          case 64: 
            { string.append('\"');
            }
          case 178: break;
          case 65: 
            { yybegin(YYINITIAL);
            }
          case 179: break;
          case 66: 
            { return symbol(sym.REGEXLITERAL, yytext());
            }
          case 180: break;
          case 67: 
            { return symbol(sym.TWOSTAREQ);
            }
          case 181: break;
          case 68: 
            { return symbol(sym.DOT3);
            }
          case 182: break;
          case 69: 
            { return symbol(sym.BYNARYLITERAL, yytext());
            }
          case 183: break;
          case 70: 
            { return symbol(sym.OCTALLITERAL, yytext());
            }
          case 184: break;
          case 71: 
            { return symbol(sym.HEXLITERAL, yytext());
            }
          case 185: break;
          case 72: 
            { return symbol(sym.TYPENEQ);
            }
          case 186: break;
          case 73: 
            { return symbol(sym.2LANGEQ);
            }
          case 187: break;
          case 74: 
            { return symbol(sym.3RANG);
            }
          case 188: break;
          case 75: 
            { return symbol(sym.2RANGEQ);
            }
          case 189: break;
          case 76: 
            { return symbol(sym.TYPEEQ);
            }
          case 190: break;
          case 77: 
            { return symbol(sym.VAR);
            }
          case 191: break;
          case 78: 
            { return symbol(sym.GET);
            }
          case 192: break;
          case 79: 
            { return symbol(sym.SET);
            }
          case 193: break;
          case 80: 
            { return symbol(sym.FOR);
            }
          case 194: break;
          case 81: 
            { return symbol(sym.TRY);
            }
          case 195: break;
          case 82: 
            { return symbol(sym.NEW);
            }
          case 196: break;
          case 83: 
            { return symbol(sym.LET);
            }
          case 197: break;
          case 84: 
            { return symbol(sym.3RANGEQ);
            }
          case 198: break;
          case 85: 
            { return symbol(sym.VOID);
            }
          case 199: break;
          case 86: 
            { return symbol (sym.BOOLEANLITERAL, yytext();
            }
          case 200: break;
          case 87: 
            { return symbol(sym.THIS);
            }
          case 201: break;
          case 88: 
            { return symbol(sym.ELSE);
            }
          case 202: break;
          case 89: 
            { return symbol(sym.CASE);
            }
          case 203: break;
          case 90: 
            { return symbol(sym.NULL);
            }
          case 204: break;
          case 91: 
            { return symbol(sym.WITH);
            }
          case 205: break;
          case 92: 
            { return symbol(sym.BREAK);
            }
          case 206: break;
          case 93: 
            { return symbol(sym.SUPER);
            }
          case 207: break;
          case 94: 
            { return symbol(sym.THROW);
            }
          case 208: break;
          case 95: 
            { return symbol(sym.CONST);
            }
          case 209: break;
          case 96: 
            { return symbol(sym.CATCH);
            }
          case 210: break;
          case 97: 
            { return symbol(sym.CLASS);
            }
          case 211: break;
          case 98: 
            { return symbol(sym.YIELD);
            }
          case 212: break;
          case 99: 
            { return symbol(sym.WHILE);
            }
          case 213: break;
          case 100: 
            { return symbol(sym.IMPORT);
            }
          case 214: break;
          case 101: 
            { return symbol(sym.STATIC);
            }
          case 215: break;
          case 102: 
            { return symbol(sym.SWITCH);
            }
          case 216: break;
          case 103: 
            { return symbol(sym.TARGET);
            }
          case 217: break;
          case 104: 
            { return symbol(sym.TYPEOF);
            }
          case 218: break;
          case 105: 
            { return symbol(sym.EXPORT);
            }
          case 219: break;
          case 106: 
            { return symbol(sym.RETURN);
            }
          case 220: break;
          case 107: 
            { return symbol(sym.DELETE);
            }
          case 221: break;
          case 108: 
            { return symbol(sym.FINALLY);
            }
          case 222: break;
          case 109: 
            { return symbol(sym.EXTENDS);
            }
          case 223: break;
          case 110: 
            { return symbol(sym.DEFAULT);
            }
          case 224: break;
          case 111: 
            { return symbol(sym.FUNCTION);
            }
          case 225: break;
          case 112: 
            { return symbol(sym.CONTINUE);
            }
          case 226: break;
          case 113: 
            { return symbol(sym.DEBUGGER);
            }
          case 227: break;
          case 114: 
            { return symbol(sym.INSTANCEOF);
            }
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
